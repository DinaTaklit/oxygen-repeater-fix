<?php
/*
Plugin Name: Oxygen Repeater Fix (Duplicated IDs)
Author: Fadlul Alim
Author URI: https://motekar.com
Version: 1.2
Description: This plugin fix duplicated IDs generated by Oxygen Repeater element.
*/

class Oxygen_Repeater_Fix
{
	private $cache_path = '';

	function __construct() {
		$this->cache_path = WP_CONTENT_DIR . '/cache/oxygen-fix';

		add_action( 'template_redirect', function() {
			ob_start( [$this, 'rewrite_css_uri'] );
		}, 1 );

		add_action( 'plugins_loaded', [$this, 'watch_uri'] );

		add_filter( 'do_shortcode_tag', [$this, 'rewrite_html'], 10, 2 );

		add_action( 'save_post', [$this, 'save_post'] );
	}

	function rewrite_css_uri( $buffer ) {
		$buffer = str_replace( '/uploads/oxygen/css/', '/cache/oxygen-fix/', $buffer );

		return $buffer;
	}

	function watch_uri() {
		if (
			isset( $_REQUEST['xlink'] ) &&
			stripslashes( $_REQUEST['xlink'] ) == 'css'
		) {
			ob_start( [$this, 'fix_css'] );
		}

		$uri = explode( '?', $_SERVER['REQUEST_URI'])[0];

		if ( preg_match( '/wp-content\/cache\/oxygen-fix(?<path>.*?\.css)/', $uri, $matches ) ) {
			$css_path = WP_CONTENT_DIR . '/uploads/oxygen/css' . $matches['path'];
			if ( file_exists( $css_path )) {
				$css_content = oxygen_css_minify( file_get_contents( $css_path ) );
				$css_content = $this->fix_css( $css_content );

				if ( ! file_exists( $this->cache_path ) ) {
					wp_mkdir_p( $this->cache_path );
				}

				file_put_contents( $this->cache_path . $matches['path'], $css_content );

				header( 'Content-Type: text/css' );
				die( $css_content );
			}
		}
	}

	function fix_css( $buffer ) {
		$repeater_ids = get_option( 'oxy_repeater_ids' );
		foreach( $repeater_ids as $id => $parent ) {
			$buffer = str_replace( '#' . $id, "#{$parent} .{$id}", $buffer );
		}

		return $buffer;
	}

	function rewrite_html( $output, $tag ) {
		if ( ! preg_match( '/oxy_dynamic_list/', $tag ) ) return $output;

		$output = preg_replace_callback( '/id="(.*?)".*?>/m', function( $matches ) {

			if ( preg_match( '/_dynamic/', $matches[1] ) ) {
				Oxygen_Repeater_Fix_IDs::set_parent( $matches[1] );
				return $matches[0];
			}

			Oxygen_Repeater_Fix_IDs::save_id( $matches[1] );

			$out = str_replace( 'id="' . $matches[1] . '"', '', $matches[0] );
			$out = str_replace( 'class="', 'class="' . $matches[1] . ' ', $out );

			return $out;
		}, $output );

		$existing_ids = get_option( 'oxy_repeater_ids' );
		$new_ids = array_merge( $existing_ids, Oxygen_Repeater_Fix_IDs::get_ids() );
		if ( $existing_ids != $new_ids ) {
			update_option( 'oxy_repeater_ids', $new_ids );
		}

		return $output;
	}

	function save_post() {
		update_option( 'oxy_repeater_ids', [] );

		foreach( glob( $this->cache_path . '/*' ) as $cache_file ) {
			unlink( $cache_file );
		}
	}
}

new Oxygen_Repeater_Fix;

class Oxygen_Repeater_Fix_IDs {
	private static $parent = '';
	private static $ids = [];

	public static function set_parent( $parent ) {
		self::$parent = $parent;
	}

	public static function save_id( $id ) {
		self::$ids[$id] = self::$parent;
	}

	public static function get_ids() {
		return self::$ids;
	}
}
